# CH.3 다양한 설계 기법

- OOCSS

- SMASS

- BEM

- PRECSS

## OOCSS (Object Oriented Css)

- 레고처럼 자유로운 조합이 가능한 모듈의 집합을 만든다

- 그 모듈을 조합해 페이지를 만든다

- 신규 페이지를 만드는 경우에도 기본적으로 추가로 CSS를 만들필요가 없다. 

### 원칙

- 스트럭처와 스킨(화면) 분리

- 컨테이너와 콘텐츠 분리 

#### 1. 스트럭처와 스킨 분리

- 예를 들어 두 개의 버튼을 한 그룹으로 만들때 버튼의 구조(width, height, padding, margin)가 스트럭처에 포함이되고, 형태(color, font, background, box-shadow)가 스킨에 해당한다..

- 공통된 부분은 스트럭처, 공통되지않은 부분은 스킨이라고 해도 괜찮음

### 2. 컨테이너와 콘텐츠 분리

- 모듈을 가능한 특정한 영역에 의존하지 않도록 한다. (선택자 점수를 너무 높이지 않는다)

## SMACSS ( Scalable and Modular Architeccture for CSS)

- 다섯 가지 분류
	
	- 베이스, 레이아웃, 모듈, 스테이트, 테마

### 베이스의 규칙

- 프로젝트의 표준 스타일을 정의 (기본 규칙을 너무 많이 정하면 영향 범위가 넓어져 범위가 지나치게 넓어진다)

- 특정한 상황에서의 사용을 가정하는 ID 셀렉터나 클래스 셀렉터는 사용할 수 없다. 

- Body의 배경 색상을 기본 규칙으로 설정하는 것을 강력하게 권장 

	- 이유 : 사용자가 브라우저 기능을 사용해 배경색상을 지정한다면 색상에 따라 웹사이트가 정상적으로 보이지 않을수도 있기때문

### 레이아웃 규칙

- 헤더나 메인 영역, 사이드바, 푸터 등 큰 틀을 구성하는 모듈은 한 차례만 사용되는 것이 많으므로 ID 셀렉터를 활용한 스타일 허용

- 레이아웃 규칙에서는 `l-`이라는 접두사를 사용하는것을 권장 (뒤에 설명할 모듈 규칙이나 스테이트 규칙에 해당하는 모듈과 쉽게 구분하기 위한 조치)

### 모듈 규칙

- 레이아웃 모듈 안에 배치되는 것을 가정하고 있음

- 모듈은 다른 페이지로 이동하거나 다른 레이아웃에 삽입하더라도 형태가 부서지거나 달라지면 안됨

-  가능한 요소형 셀렉터를 사용하지 않는다

- HTML과 스타일링을 느슨하게 결합하기

	- 요소를 시맨틱으로 한다 (div와 span 사용시 class 붙이기)

- 요소형 셀렉터를 사용할 때는 자녀 셀렉터를 사용한다. 

	- 스타일링에는 클래스 선택자가 가장 안전하고 효율적

- 스타일을 엎어쓰기 위한 서브 클래스

	- 스타일링을 엎어쓸 때 의도치 않은 문제들이 발생하는데 이 때 서브 클래스를 사용하는 것이 좋다. 
